package ninja.taskbook.hello; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-20")
public class HelloService {

  public interface Iface {

    public int hi(String word1, String word2, String word3) throws TException;

  }

  public interface AsyncIface {

    public void hi(String word1, String word2, String word3, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int hi(String word1, String word2, String word3) throws TException
    {
      send_hi(word1, word2, word3);
      return recv_hi();
    }

    public void send_hi(String word1, String word2, String word3) throws TException
    {
      hi_args args = new hi_args();
      args.setWord1(word1);
      args.setWord2(word2);
      args.setWord3(word3);
      sendBase("hi", args);
    }

    public int recv_hi() throws TException
    {
      hi_result result = new hi_result();
      receiveBase(result, "hi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hi failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void hi(String word1, String word2, String word3, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      hi_call method_call = new hi_call(word1, word2, word3, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hi_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String word1;
      private String word2;
      private String word3;
      public hi_call(String word1, String word2, String word3, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.word1 = word1;
        this.word2 = word2;
        this.word3 = word3;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hi_args args = new hi_args();
        args.setWord1(word1);
        args.setWord2(word2);
        args.setWord3(word3);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hi();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("hi", new hi());
      return processMap;
    }

    public static class hi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hi_args> {
      public hi() {
        super("hi");
      }

      public hi_args getEmptyArgsInstance() {
        return new hi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hi_result getResult(I iface, hi_args args) throws TException {
        hi_result result = new hi_result();
        result.success = iface.hi(args.word1, args.word2, args.word3);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("hi", new hi());
      return processMap;
    }

    public static class hi<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hi_args, Integer> {
      public hi() {
        super("hi");
      }

      public hi_args getEmptyArgsInstance() {
        return new hi_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            hi_result result = new hi_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hi_result result = new hi_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hi_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.hi(args.word1, args.word2, args.word3,resultHandler);
      }
    }

  }

  public static class hi_args implements org.apache.thrift.TBase<hi_args, hi_args._Fields>, java.io.Serializable, Cloneable, Comparable<hi_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hi_args");

    private static final org.apache.thrift.protocol.TField WORD1_FIELD_DESC = new org.apache.thrift.protocol.TField("word1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORD2_FIELD_DESC = new org.apache.thrift.protocol.TField("word2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WORD3_FIELD_DESC = new org.apache.thrift.protocol.TField("word3", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hi_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hi_argsTupleSchemeFactory());
    }

    public String word1; // required
    public String word2; // required
    public String word3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WORD1((short)1, "word1"),
      WORD2((short)2, "word2"),
      WORD3((short)3, "word3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WORD1
            return WORD1;
          case 2: // WORD2
            return WORD2;
          case 3: // WORD3
            return WORD3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WORD1, new org.apache.thrift.meta_data.FieldMetaData("word1", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORD2, new org.apache.thrift.meta_data.FieldMetaData("word2", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORD3, new org.apache.thrift.meta_data.FieldMetaData("word3", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hi_args.class, metaDataMap);
    }

    public hi_args() {
    }

    public hi_args(
      String word1,
      String word2,
      String word3)
    {
      this();
      this.word1 = word1;
      this.word2 = word2;
      this.word3 = word3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hi_args(hi_args other) {
      if (other.isSetWord1()) {
        this.word1 = other.word1;
      }
      if (other.isSetWord2()) {
        this.word2 = other.word2;
      }
      if (other.isSetWord3()) {
        this.word3 = other.word3;
      }
    }

    public hi_args deepCopy() {
      return new hi_args(this);
    }

    @Override
    public void clear() {
      this.word1 = null;
      this.word2 = null;
      this.word3 = null;
    }

    public String getWord1() {
      return this.word1;
    }

    public hi_args setWord1(String word1) {
      this.word1 = word1;
      return this;
    }

    public void unsetWord1() {
      this.word1 = null;
    }

    /** Returns true if field word1 is set (has been assigned a value) and false otherwise */
    public boolean isSetWord1() {
      return this.word1 != null;
    }

    public void setWord1IsSet(boolean value) {
      if (!value) {
        this.word1 = null;
      }
    }

    public String getWord2() {
      return this.word2;
    }

    public hi_args setWord2(String word2) {
      this.word2 = word2;
      return this;
    }

    public void unsetWord2() {
      this.word2 = null;
    }

    /** Returns true if field word2 is set (has been assigned a value) and false otherwise */
    public boolean isSetWord2() {
      return this.word2 != null;
    }

    public void setWord2IsSet(boolean value) {
      if (!value) {
        this.word2 = null;
      }
    }

    public String getWord3() {
      return this.word3;
    }

    public hi_args setWord3(String word3) {
      this.word3 = word3;
      return this;
    }

    public void unsetWord3() {
      this.word3 = null;
    }

    /** Returns true if field word3 is set (has been assigned a value) and false otherwise */
    public boolean isSetWord3() {
      return this.word3 != null;
    }

    public void setWord3IsSet(boolean value) {
      if (!value) {
        this.word3 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WORD1:
        if (value == null) {
          unsetWord1();
        } else {
          setWord1((String)value);
        }
        break;

      case WORD2:
        if (value == null) {
          unsetWord2();
        } else {
          setWord2((String)value);
        }
        break;

      case WORD3:
        if (value == null) {
          unsetWord3();
        } else {
          setWord3((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WORD1:
        return getWord1();

      case WORD2:
        return getWord2();

      case WORD3:
        return getWord3();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WORD1:
        return isSetWord1();
      case WORD2:
        return isSetWord2();
      case WORD3:
        return isSetWord3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hi_args)
        return this.equals((hi_args)that);
      return false;
    }

    public boolean equals(hi_args that) {
      if (that == null)
        return false;

      boolean this_present_word1 = true && this.isSetWord1();
      boolean that_present_word1 = true && that.isSetWord1();
      if (this_present_word1 || that_present_word1) {
        if (!(this_present_word1 && that_present_word1))
          return false;
        if (!this.word1.equals(that.word1))
          return false;
      }

      boolean this_present_word2 = true && this.isSetWord2();
      boolean that_present_word2 = true && that.isSetWord2();
      if (this_present_word2 || that_present_word2) {
        if (!(this_present_word2 && that_present_word2))
          return false;
        if (!this.word2.equals(that.word2))
          return false;
      }

      boolean this_present_word3 = true && this.isSetWord3();
      boolean that_present_word3 = true && that.isSetWord3();
      if (this_present_word3 || that_present_word3) {
        if (!(this_present_word3 && that_present_word3))
          return false;
        if (!this.word3.equals(that.word3))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_word1 = true && (isSetWord1());
      list.add(present_word1);
      if (present_word1)
        list.add(word1);

      boolean present_word2 = true && (isSetWord2());
      list.add(present_word2);
      if (present_word2)
        list.add(word2);

      boolean present_word3 = true && (isSetWord3());
      list.add(present_word3);
      if (present_word3)
        list.add(word3);

      return list.hashCode();
    }

    @Override
    public int compareTo(hi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWord1()).compareTo(other.isSetWord1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWord1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word1, other.word1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWord2()).compareTo(other.isSetWord2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWord2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word2, other.word2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWord3()).compareTo(other.isSetWord3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWord3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word3, other.word3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hi_args(");
      boolean first = true;

      sb.append("word1:");
      if (this.word1 == null) {
        sb.append("null");
      } else {
        sb.append(this.word1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("word2:");
      if (this.word2 == null) {
        sb.append("null");
      } else {
        sb.append(this.word2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("word3:");
      if (this.word3 == null) {
        sb.append("null");
      } else {
        sb.append(this.word3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (word1 == null) {
        throw new TProtocolException("Required field 'word1' was not present! Struct: " + toString());
      }
      if (word2 == null) {
        throw new TProtocolException("Required field 'word2' was not present! Struct: " + toString());
      }
      if (word3 == null) {
        throw new TProtocolException("Required field 'word3' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hi_argsStandardSchemeFactory implements SchemeFactory {
      public hi_argsStandardScheme getScheme() {
        return new hi_argsStandardScheme();
      }
    }

    private static class hi_argsStandardScheme extends StandardScheme<hi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hi_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // WORD1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.word1 = iprot.readString();
                struct.setWord1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORD2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.word2 = iprot.readString();
                struct.setWord2IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WORD3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.word3 = iprot.readString();
                struct.setWord3IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hi_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.word1 != null) {
          oprot.writeFieldBegin(WORD1_FIELD_DESC);
          oprot.writeString(struct.word1);
          oprot.writeFieldEnd();
        }
        if (struct.word2 != null) {
          oprot.writeFieldBegin(WORD2_FIELD_DESC);
          oprot.writeString(struct.word2);
          oprot.writeFieldEnd();
        }
        if (struct.word3 != null) {
          oprot.writeFieldBegin(WORD3_FIELD_DESC);
          oprot.writeString(struct.word3);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hi_argsTupleSchemeFactory implements SchemeFactory {
      public hi_argsTupleScheme getScheme() {
        return new hi_argsTupleScheme();
      }
    }

    private static class hi_argsTupleScheme extends TupleScheme<hi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hi_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.word1);
        oprot.writeString(struct.word2);
        oprot.writeString(struct.word3);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hi_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.word1 = iprot.readString();
        struct.setWord1IsSet(true);
        struct.word2 = iprot.readString();
        struct.setWord2IsSet(true);
        struct.word3 = iprot.readString();
        struct.setWord3IsSet(true);
      }
    }

  }

  public static class hi_result implements org.apache.thrift.TBase<hi_result, hi_result._Fields>, java.io.Serializable, Cloneable, Comparable<hi_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hi_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hi_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hi_result.class, metaDataMap);
    }

    public hi_result() {
    }

    public hi_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hi_result(hi_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public hi_result deepCopy() {
      return new hi_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public hi_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hi_result)
        return this.equals((hi_result)that);
      return false;
    }

    public boolean equals(hi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hi_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hi_resultStandardSchemeFactory implements SchemeFactory {
      public hi_resultStandardScheme getScheme() {
        return new hi_resultStandardScheme();
      }
    }

    private static class hi_resultStandardScheme extends StandardScheme<hi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hi_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hi_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hi_resultTupleSchemeFactory implements SchemeFactory {
      public hi_resultTupleScheme getScheme() {
        return new hi_resultTupleScheme();
      }
    }

    private static class hi_resultTupleScheme extends TupleScheme<hi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hi_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hi_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
