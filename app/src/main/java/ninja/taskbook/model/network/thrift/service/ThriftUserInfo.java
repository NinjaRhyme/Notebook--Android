/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ninja.taskbook.model.network.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-17")
public class ThriftUserInfo implements org.apache.thrift.TBase<ThriftUserInfo, ThriftUserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftUserInfo> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftUserInfo");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_nickname", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new ThriftUserInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new ThriftUserInfoTupleSchemeFactory());
    }

    public int user_id; // required
    public String user_name; // required
    public String user_nickname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        USER_ID((short)1, "user_id"),
        USER_NAME((short)2, "user_name"),
        USER_NICKNAME((short)3, "user_nickname");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // USER_ID
                    return USER_ID;
                case 2: // USER_NAME
                    return USER_NAME;
                case 3: // USER_NICKNAME
                    return USER_NICKNAME;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __USER_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.USER_NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("user_nickname", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftUserInfo.class, metaDataMap);
    }

    public ThriftUserInfo() {
    }

    public ThriftUserInfo(
            int user_id,
            String user_name,
            String user_nickname)
    {
        this();
        this.user_id = user_id;
        setUser_idIsSet(true);
        this.user_name = user_name;
        this.user_nickname = user_nickname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftUserInfo(ThriftUserInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        this.user_id = other.user_id;
        if (other.isSetUser_name()) {
            this.user_name = other.user_name;
        }
        if (other.isSetUser_nickname()) {
            this.user_nickname = other.user_nickname;
        }
    }

    public ThriftUserInfo deepCopy() {
        return new ThriftUserInfo(this);
    }

    @Override
    public void clear() {
        setUser_idIsSet(false);
        this.user_id = 0;
        this.user_name = null;
        this.user_nickname = null;
    }

    public int getUser_id() {
        return this.user_id;
    }

    public ThriftUserInfo setUser_id(int user_id) {
        this.user_id = user_id;
        setUser_idIsSet(true);
        return this;
    }

    public void unsetUser_id() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
        return EncodingUtils.testBit(__isset_bitfield, __USER_ID_ISSET_ID);
    }

    public void setUser_idIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ID_ISSET_ID, value);
    }

    public String getUser_name() {
        return this.user_name;
    }

    public ThriftUserInfo setUser_name(String user_name) {
        this.user_name = user_name;
        return this;
    }

    public void unsetUser_name() {
        this.user_name = null;
    }

    /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_name() {
        return this.user_name != null;
    }

    public void setUser_nameIsSet(boolean value) {
        if (!value) {
            this.user_name = null;
        }
    }

    public String getUser_nickname() {
        return this.user_nickname;
    }

    public ThriftUserInfo setUser_nickname(String user_nickname) {
        this.user_nickname = user_nickname;
        return this;
    }

    public void unsetUser_nickname() {
        this.user_nickname = null;
    }

    /** Returns true if field user_nickname is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_nickname() {
        return this.user_nickname != null;
    }

    public void setUser_nicknameIsSet(boolean value) {
        if (!value) {
            this.user_nickname = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case USER_ID:
                if (value == null) {
                    unsetUser_id();
                } else {
                    setUser_id((Integer)value);
                }
                break;

            case USER_NAME:
                if (value == null) {
                    unsetUser_name();
                } else {
                    setUser_name((String)value);
                }
                break;

            case USER_NICKNAME:
                if (value == null) {
                    unsetUser_nickname();
                } else {
                    setUser_nickname((String)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case USER_ID:
                return getUser_id();

            case USER_NAME:
                return getUser_name();

            case USER_NICKNAME:
                return getUser_nickname();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case USER_ID:
                return isSetUser_id();
            case USER_NAME:
                return isSetUser_name();
            case USER_NICKNAME:
                return isSetUser_nickname();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ThriftUserInfo)
            return this.equals((ThriftUserInfo)that);
        return false;
    }

    public boolean equals(ThriftUserInfo that) {
        if (that == null)
            return false;

        boolean this_present_user_id = true;
        boolean that_present_user_id = true;
        if (this_present_user_id || that_present_user_id) {
            if (!(this_present_user_id && that_present_user_id))
                return false;
            if (this.user_id != that.user_id)
                return false;
        }

        boolean this_present_user_name = true && this.isSetUser_name();
        boolean that_present_user_name = true && that.isSetUser_name();
        if (this_present_user_name || that_present_user_name) {
            if (!(this_present_user_name && that_present_user_name))
                return false;
            if (!this.user_name.equals(that.user_name))
                return false;
        }

        boolean this_present_user_nickname = true && this.isSetUser_nickname();
        boolean that_present_user_nickname = true && that.isSetUser_nickname();
        if (this_present_user_nickname || that_present_user_nickname) {
            if (!(this_present_user_nickname && that_present_user_nickname))
                return false;
            if (!this.user_nickname.equals(that.user_nickname))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_user_id = true;
        list.add(present_user_id);
        if (present_user_id)
            list.add(user_id);

        boolean present_user_name = true && (isSetUser_name());
        list.add(present_user_name);
        if (present_user_name)
            list.add(user_name);

        boolean present_user_nickname = true && (isSetUser_nickname());
        list.add(present_user_nickname);
        if (present_user_nickname)
            list.add(user_nickname);

        return list.hashCode();
    }

    @Override
    public int compareTo(ThriftUserInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUser_id()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(other.isSetUser_name());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUser_name()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, other.user_name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUser_nickname()).compareTo(other.isSetUser_nickname());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUser_nickname()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_nickname, other.user_nickname);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ThriftUserInfo(");
        boolean first = true;

        sb.append("user_id:");
        sb.append(this.user_id);
        first = false;
        if (!first) sb.append(", ");
        sb.append("user_name:");
        if (this.user_name == null) {
            sb.append("null");
        } else {
            sb.append(this.user_name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("user_nickname:");
        if (this.user_nickname == null) {
            sb.append("null");
        } else {
            sb.append(this.user_nickname);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'user_id' because it's a primitive and you chose the non-beans generator.
        if (user_name == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'user_name' was not present! Struct: " + toString());
        }
        if (user_nickname == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'user_nickname' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftUserInfoStandardSchemeFactory implements SchemeFactory {
        public ThriftUserInfoStandardScheme getScheme() {
            return new ThriftUserInfoStandardScheme();
        }
    }

    private static class ThriftUserInfoStandardScheme extends StandardScheme<ThriftUserInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftUserInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // USER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.user_id = iprot.readI32();
                            struct.setUser_idIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // USER_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.user_name = iprot.readString();
                            struct.setUser_nameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // USER_NICKNAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.user_nickname = iprot.readString();
                            struct.setUser_nicknameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetUser_id()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'user_id' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftUserInfo struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(USER_ID_FIELD_DESC);
            oprot.writeI32(struct.user_id);
            oprot.writeFieldEnd();
            if (struct.user_name != null) {
                oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                oprot.writeString(struct.user_name);
                oprot.writeFieldEnd();
            }
            if (struct.user_nickname != null) {
                oprot.writeFieldBegin(USER_NICKNAME_FIELD_DESC);
                oprot.writeString(struct.user_nickname);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ThriftUserInfoTupleSchemeFactory implements SchemeFactory {
        public ThriftUserInfoTupleScheme getScheme() {
            return new ThriftUserInfoTupleScheme();
        }
    }

    private static class ThriftUserInfoTupleScheme extends TupleScheme<ThriftUserInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftUserInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.user_id);
            oprot.writeString(struct.user_name);
            oprot.writeString(struct.user_nickname);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftUserInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.user_id = iprot.readI32();
            struct.setUser_idIsSet(true);
            struct.user_name = iprot.readString();
            struct.setUser_nameIsSet(true);
            struct.user_nickname = iprot.readString();
            struct.setUser_nicknameIsSet(true);
        }
    }

}

