/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ninja.taskbook.model.network.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-26")
public class ThriftNotification implements org.apache.thrift.TBase<ThriftNotification, ThriftNotification._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftNotification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftNotification");

  private static final org.apache.thrift.protocol.TField NOTI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notiId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OWNER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerUserId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NOTI_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("notiType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NOTI_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("notiData", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftNotificationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftNotificationTupleSchemeFactory());
  }

  public int notiId; // required
  public int ownerUserId; // required
  public int receiverUserId; // required
  public int notiType; // required
  public String notiData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTI_ID((short)1, "notiId"),
    OWNER_USER_ID((short)2, "ownerUserId"),
    RECEIVER_USER_ID((short)3, "receiverUserId"),
    NOTI_TYPE((short)4, "notiType"),
    NOTI_DATA((short)5, "notiData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTI_ID
          return NOTI_ID;
        case 2: // OWNER_USER_ID
          return OWNER_USER_ID;
        case 3: // RECEIVER_USER_ID
          return RECEIVER_USER_ID;
        case 4: // NOTI_TYPE
          return NOTI_TYPE;
        case 5: // NOTI_DATA
          return NOTI_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIID_ISSET_ID = 0;
  private static final int __OWNERUSERID_ISSET_ID = 1;
  private static final int __RECEIVERUSERID_ISSET_ID = 2;
  private static final int __NOTITYPE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTI_ID, new org.apache.thrift.meta_data.FieldMetaData("notiId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OWNER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("receiverUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTI_TYPE, new org.apache.thrift.meta_data.FieldMetaData("notiType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTI_DATA, new org.apache.thrift.meta_data.FieldMetaData("notiData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftNotification.class, metaDataMap);
  }

  public ThriftNotification() {
  }

  public ThriftNotification(
    int notiId,
    int ownerUserId,
    int receiverUserId,
    int notiType,
    String notiData)
  {
    this();
    this.notiId = notiId;
    setNotiIdIsSet(true);
    this.ownerUserId = ownerUserId;
    setOwnerUserIdIsSet(true);
    this.receiverUserId = receiverUserId;
    setReceiverUserIdIsSet(true);
    this.notiType = notiType;
    setNotiTypeIsSet(true);
    this.notiData = notiData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftNotification(ThriftNotification other) {
    __isset_bitfield = other.__isset_bitfield;
    this.notiId = other.notiId;
    this.ownerUserId = other.ownerUserId;
    this.receiverUserId = other.receiverUserId;
    this.notiType = other.notiType;
    if (other.isSetNotiData()) {
      this.notiData = other.notiData;
    }
  }

  public ThriftNotification deepCopy() {
    return new ThriftNotification(this);
  }

  @Override
  public void clear() {
    setNotiIdIsSet(false);
    this.notiId = 0;
    setOwnerUserIdIsSet(false);
    this.ownerUserId = 0;
    setReceiverUserIdIsSet(false);
    this.receiverUserId = 0;
    setNotiTypeIsSet(false);
    this.notiType = 0;
    this.notiData = null;
  }

  public int getNotiId() {
    return this.notiId;
  }

  public ThriftNotification setNotiId(int notiId) {
    this.notiId = notiId;
    setNotiIdIsSet(true);
    return this;
  }

  public void unsetNotiId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIID_ISSET_ID);
  }

  /** Returns true if field notiId is set (has been assigned a value) and false otherwise */
  public boolean isSetNotiId() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIID_ISSET_ID);
  }

  public void setNotiIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIID_ISSET_ID, value);
  }

  public int getOwnerUserId() {
    return this.ownerUserId;
  }

  public ThriftNotification setOwnerUserId(int ownerUserId) {
    this.ownerUserId = ownerUserId;
    setOwnerUserIdIsSet(true);
    return this;
  }

  public void unsetOwnerUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OWNERUSERID_ISSET_ID);
  }

  /** Returns true if field ownerUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __OWNERUSERID_ISSET_ID);
  }

  public void setOwnerUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OWNERUSERID_ISSET_ID, value);
  }

  public int getReceiverUserId() {
    return this.receiverUserId;
  }

  public ThriftNotification setReceiverUserId(int receiverUserId) {
    this.receiverUserId = receiverUserId;
    setReceiverUserIdIsSet(true);
    return this;
  }

  public void unsetReceiverUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVERUSERID_ISSET_ID);
  }

  /** Returns true if field receiverUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVERUSERID_ISSET_ID);
  }

  public void setReceiverUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVERUSERID_ISSET_ID, value);
  }

  public int getNotiType() {
    return this.notiType;
  }

  public ThriftNotification setNotiType(int notiType) {
    this.notiType = notiType;
    setNotiTypeIsSet(true);
    return this;
  }

  public void unsetNotiType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTITYPE_ISSET_ID);
  }

  /** Returns true if field notiType is set (has been assigned a value) and false otherwise */
  public boolean isSetNotiType() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTITYPE_ISSET_ID);
  }

  public void setNotiTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTITYPE_ISSET_ID, value);
  }

  public String getNotiData() {
    return this.notiData;
  }

  public ThriftNotification setNotiData(String notiData) {
    this.notiData = notiData;
    return this;
  }

  public void unsetNotiData() {
    this.notiData = null;
  }

  /** Returns true if field notiData is set (has been assigned a value) and false otherwise */
  public boolean isSetNotiData() {
    return this.notiData != null;
  }

  public void setNotiDataIsSet(boolean value) {
    if (!value) {
      this.notiData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTI_ID:
      if (value == null) {
        unsetNotiId();
      } else {
        setNotiId((Integer)value);
      }
      break;

    case OWNER_USER_ID:
      if (value == null) {
        unsetOwnerUserId();
      } else {
        setOwnerUserId((Integer)value);
      }
      break;

    case RECEIVER_USER_ID:
      if (value == null) {
        unsetReceiverUserId();
      } else {
        setReceiverUserId((Integer)value);
      }
      break;

    case NOTI_TYPE:
      if (value == null) {
        unsetNotiType();
      } else {
        setNotiType((Integer)value);
      }
      break;

    case NOTI_DATA:
      if (value == null) {
        unsetNotiData();
      } else {
        setNotiData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTI_ID:
      return getNotiId();

    case OWNER_USER_ID:
      return getOwnerUserId();

    case RECEIVER_USER_ID:
      return getReceiverUserId();

    case NOTI_TYPE:
      return getNotiType();

    case NOTI_DATA:
      return getNotiData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTI_ID:
      return isSetNotiId();
    case OWNER_USER_ID:
      return isSetOwnerUserId();
    case RECEIVER_USER_ID:
      return isSetReceiverUserId();
    case NOTI_TYPE:
      return isSetNotiType();
    case NOTI_DATA:
      return isSetNotiData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftNotification)
      return this.equals((ThriftNotification)that);
    return false;
  }

  public boolean equals(ThriftNotification that) {
    if (that == null)
      return false;

    boolean this_present_notiId = true;
    boolean that_present_notiId = true;
    if (this_present_notiId || that_present_notiId) {
      if (!(this_present_notiId && that_present_notiId))
        return false;
      if (this.notiId != that.notiId)
        return false;
    }

    boolean this_present_ownerUserId = true;
    boolean that_present_ownerUserId = true;
    if (this_present_ownerUserId || that_present_ownerUserId) {
      if (!(this_present_ownerUserId && that_present_ownerUserId))
        return false;
      if (this.ownerUserId != that.ownerUserId)
        return false;
    }

    boolean this_present_receiverUserId = true;
    boolean that_present_receiverUserId = true;
    if (this_present_receiverUserId || that_present_receiverUserId) {
      if (!(this_present_receiverUserId && that_present_receiverUserId))
        return false;
      if (this.receiverUserId != that.receiverUserId)
        return false;
    }

    boolean this_present_notiType = true;
    boolean that_present_notiType = true;
    if (this_present_notiType || that_present_notiType) {
      if (!(this_present_notiType && that_present_notiType))
        return false;
      if (this.notiType != that.notiType)
        return false;
    }

    boolean this_present_notiData = true && this.isSetNotiData();
    boolean that_present_notiData = true && that.isSetNotiData();
    if (this_present_notiData || that_present_notiData) {
      if (!(this_present_notiData && that_present_notiData))
        return false;
      if (!this.notiData.equals(that.notiData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_notiId = true;
    list.add(present_notiId);
    if (present_notiId)
      list.add(notiId);

    boolean present_ownerUserId = true;
    list.add(present_ownerUserId);
    if (present_ownerUserId)
      list.add(ownerUserId);

    boolean present_receiverUserId = true;
    list.add(present_receiverUserId);
    if (present_receiverUserId)
      list.add(receiverUserId);

    boolean present_notiType = true;
    list.add(present_notiType);
    if (present_notiType)
      list.add(notiType);

    boolean present_notiData = true && (isSetNotiData());
    list.add(present_notiData);
    if (present_notiData)
      list.add(notiData);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftNotification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNotiId()).compareTo(other.isSetNotiId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotiId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notiId, other.notiId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerUserId()).compareTo(other.isSetOwnerUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerUserId, other.ownerUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiverUserId()).compareTo(other.isSetReceiverUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverUserId, other.receiverUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotiType()).compareTo(other.isSetNotiType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotiType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notiType, other.notiType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotiData()).compareTo(other.isSetNotiData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotiData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notiData, other.notiData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftNotification(");
    boolean first = true;

    sb.append("notiId:");
    sb.append(this.notiId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerUserId:");
    sb.append(this.ownerUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiverUserId:");
    sb.append(this.receiverUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notiType:");
    sb.append(this.notiType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notiData:");
    if (this.notiData == null) {
      sb.append("null");
    } else {
      sb.append(this.notiData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'notiId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ownerUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'receiverUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'notiType' because it's a primitive and you chose the non-beans generator.
    if (notiData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'notiData' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftNotificationStandardSchemeFactory implements SchemeFactory {
    public ThriftNotificationStandardScheme getScheme() {
      return new ThriftNotificationStandardScheme();
    }
  }

  private static class ThriftNotificationStandardScheme extends StandardScheme<ThriftNotification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftNotification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTI_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notiId = iprot.readI32();
              struct.setNotiIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWNER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ownerUserId = iprot.readI32();
              struct.setOwnerUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.receiverUserId = iprot.readI32();
              struct.setReceiverUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOTI_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notiType = iprot.readI32();
              struct.setNotiTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTI_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notiData = iprot.readString();
              struct.setNotiDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNotiId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notiId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOwnerUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ownerUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReceiverUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'receiverUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNotiType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notiType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftNotification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOTI_ID_FIELD_DESC);
      oprot.writeI32(struct.notiId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OWNER_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.ownerUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVER_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.receiverUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTI_TYPE_FIELD_DESC);
      oprot.writeI32(struct.notiType);
      oprot.writeFieldEnd();
      if (struct.notiData != null) {
        oprot.writeFieldBegin(NOTI_DATA_FIELD_DESC);
        oprot.writeString(struct.notiData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftNotificationTupleSchemeFactory implements SchemeFactory {
    public ThriftNotificationTupleScheme getScheme() {
      return new ThriftNotificationTupleScheme();
    }
  }

  private static class ThriftNotificationTupleScheme extends TupleScheme<ThriftNotification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftNotification struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.notiId);
      oprot.writeI32(struct.ownerUserId);
      oprot.writeI32(struct.receiverUserId);
      oprot.writeI32(struct.notiType);
      oprot.writeString(struct.notiData);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftNotification struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.notiId = iprot.readI32();
      struct.setNotiIdIsSet(true);
      struct.ownerUserId = iprot.readI32();
      struct.setOwnerUserIdIsSet(true);
      struct.receiverUserId = iprot.readI32();
      struct.setReceiverUserIdIsSet(true);
      struct.notiType = iprot.readI32();
      struct.setNotiTypeIsSet(true);
      struct.notiData = iprot.readString();
      struct.setNotiDataIsSet(true);
    }
  }

}

